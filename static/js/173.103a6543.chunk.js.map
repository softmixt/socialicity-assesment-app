{"version":3,"file":"static/js/173.103a6543.chunk.js","mappings":"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","sources":["app/hooks.ts","pages/customer/users/UsersEditPage.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from 'state/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup/dist/yup';\nimport { selectUsers, updateUser, UserDataState } from 'state/users/usersSlice';\nimport classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\n\nexport default function UsersListPage() {\n  const dispatch = useAppDispatch();\n\n  const params = useParams();\n\n  const { userId } = params;\n  const [selectedUser, setSelectedUser] = useState<UserDataState | null>();\n\n  const users: UserDataState[] = useAppSelector(selectUsers);\n\n  useEffect(() => {\n    const userData = users.filter((u: UserDataState) => (u.id === Number(userId)));\n    setSelectedUser(userData[0]);\n  }, [users]);\n\n  const schema = yup.object({\n    first_name: yup.string().required(),\n    last_name: yup.string().required(),\n    email: yup.string().email(),\n    avatar: yup.string().required(),\n  }).required();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  useEffect(() => {\n    reset({\n      first_name: selectedUser?.first_name,\n      last_name: selectedUser?.last_name,\n      email: selectedUser?.email,\n      avatar: selectedUser?.avatar,\n    });\n  }, [selectedUser]);\n\n  const onSubmit = (data) => {\n    dispatch(updateUser({ ...data, id: selectedUser?.id }));\n    toast.success('User successfully updated !');\n  };\n\n  return (\n    <div className=\"row g-5 m-5\">\n      <div className=\"col-md-7 col-lg-8\">\n        <h4 className=\"mb-3\">Billing address</h4>\n\n        <form className=\"p-0\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"row g-3\">\n            <div className=\"col-sm-6\">\n              <label htmlFor=\"firstName\" className=\"form-label\">First name</label>\n              <input\n                {...register('first_name')}\n                id=\"firstName\"\n                className={classNames(['form-control', 'form-control-sm', { 'is-invalid': errors.first_name }])}\n              />\n              {errors.first_name && (\n                <div id=\"validationFirstNameFeedback\" className=\"invalid-feedback\">\n                  <p>{errors.first_name?.message}</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"col-sm-6\">\n              <label htmlFor=\"lastName\" className=\"form-label\">Last name</label>\n              <input\n                {...register('last_name')}\n                id=\"lastName\"\n                className={classNames(['form-control', 'form-control-sm', { 'is-invalid': errors.last_name }])}\n              />\n              {errors.last_name && (\n                <div id=\"validationLastNameFeedback\" className=\"invalid-feedback\">\n                  <p>{errors.last_name?.message}</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"col-sm-6\">\n              <label htmlFor=\"email\" className=\"form-label\">Email</label>\n              <input\n                {...register('email')}\n                id=\"email\"\n                className={classNames(['form-control', 'form-control-sm', { 'is-invalid': errors.email }])}\n              />\n              {errors.email && (\n                <div id=\"validationEmailFeedback\" className=\"invalid-feedback\">\n                  <p>{errors.email?.message}</p>\n                </div>\n              )}\n            </div>\n            <div className=\"col-sm-6\">\n              <label htmlFor=\"avatar\" className=\"form-label\">Avatar</label>\n              <input\n                {...register('avatar')}\n                id=\"avatar\"\n                className={classNames(['form-control', 'form-control-sm', { 'is-invalid': errors.avatar }])}\n              />\n              {errors.avatar && (\n                <div id=\"validationAvatarFeedback\" className=\"invalid-feedback\">\n                  <p>{errors.avatar?.message}</p>\n                </div>\n              )}\n            </div>\n          </div>\n          <hr className=\"my-4\" />\n          <button className=\" btn btn-primary btn-sm\" type=\"submit\">\n            <i className=\"fa-solid fa-file-pen\" />\n            {' '}\n            Update User\n          </button>\n        </form>\n\n      </div>\n\n    </div>\n  );\n}\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","UsersListPage","dispatch","userId","useParams","useState","selectedUser","setSelectedUser","users","selectUsers","useEffect","userData","filter","u","id","Number","schema","yup","first_name","required","last_name","email","avatar","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","className","onSubmit","data","updateUser","toast","htmlFor","classNames","message","type"],"sourceRoot":""}